using System.Collections;

namespace _08._HashTable
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /*
            HashTable : 키(key)와 값(value)으로 이루어진 데이터를 저장하는 자료구조
            
            해싱 : 각각의 키를 해시함수를 통해 고유한 해시값으로 생성하는 과정
            해시함수 : 임의의 길이를 가진 데이터(key)를 입력받아 고정된 길이의 해시값을 출력하는 함수
            
            장점 : 빠른 검색과 삽입 가능
            단점 : 테이블의 크기가 클 수록 빠르지만 메모리에 부담
            해시함수의 특징
            1. 입력 데이터가 같으면 항상 같은 해시값을 출력
            2. 입력 데이터가 다르면 가능한 한 서로 다른 해시값을 출력
            
            해싱 과정에서 해시함수는 입력 데이터의 일부분만을 이용하여 출력값을 생성하기 때문에
            충돌(collision : 서로 다른 입력 데이터에 대해 해시함수가 동일한 해시값을 출력)이
            발생할 수 있음. 충돌이 발생하면 해시테이블에서 값을 검색하는 과정에서 성능저하가 발생 가능
            따라서 충돌을 최소하하는 해시함수가 필요
            
            충돌 해결방안
            1. 체이닝 : 해시 충돌이 발생하면 연결리스트로 데이터들을 연결하는 방식
            장점 : 해시테이블에 자료가 많아지더라도 성능저하가 적음
            단점 : 해시테이블 외 추가적인 저장공간 필요
            
            2. 개방주소법 : 해시 충돌이 발생하면 다른 빈 공간에 데이터를 삽입하는 방식
               선형탐색, 제곱탐색, 이중해시 등을 통해 다른 빈 공간 탐색 및 삽입
            장점 : 추가적인 저장공간이 필요하지 않음
            단점 : 해지테이블에 자료가 많아질 수록 성능저하가 많음(테이블의 약 80% 이상 되면 부하 커짐)
            
            c#의 기본 해시함수
            1. 입력 데이터를 바이트 배열로 변환
            2. 바이트 배열을 순회하면서 각 바이트를 고유한 숫자로 변환
            3. 숫자들을 이용하여 해시값을 계산, int 반환
            
            직접 구현도 가능
            
            */
        }
    }
}

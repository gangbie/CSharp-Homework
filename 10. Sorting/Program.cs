namespace _10._Sorting
{
    internal class Program
    {
        static void Main(string[] args)
        {
        }
    }
}
/*
1.선형정렬(시간복잡도 : O(N^2))
비교 기반 정렬 알고리즘의 하나로, 입력 배열을 한 번 순회하면서 
각 요소를 정렬된 위치에 삽입하는 방식으로 동작

1-1. 선택정렬(Selection Sort) : 데이터 중 가장 작은 값부터 하나씩 선택하여 정렬
    a. 입력 배열에서 가장 작은 값을 찾음
    b. 해당 값을 배열의 맨 앞에 위치한 값과 교환
    c. 배열의 맨 앞을 제외한 나머지 부분을 정렬된 부분으로 간주하고, 위 과정 반복

1-2. 삽입정렬(Insertion Sort) : 데이터를 하나씩 꺼내어 정렬된 자료 중 적합한 위치에 삽입하여 정렬
    a. 입력 배열에서 두 번째 요소부터 시작
    b. 현재 요소를 이전 요소와 비교하면서, 이전 요소가 현재 요소보다 크면 
       이전 요소를 한 칸씩 오른쪽으로 이동
    c. 이전 요소가 현재 요소보다 작거나, 이전 요소가 배열의 첫 번째 요소라면, 
       현재 요소를 이전 요소 바로 다음 위치에 삽입
    d. 배열의 마지막 요소까지 위 과정 반복

1-3. 버블정렬(Bubble Sort) : 서로 인접한 데이터를 비교하여 정렬
    a. 입력 배열의 첫 번째 요소부터 시작
    b. 현재 요소와 다음 요소를 비교하여, 현재 요소가 다음 요소보다 크면 두 요소의 위치를 바꿈
    c. 마지막 요소까지 위 과정을 반복
    d. 마지막 요소까지 반복이 끝나면, 마지막 요소가 가장 큰 값이므로, 
       다시 첫 번째 요소부터 위 과정을 반복
    e. 위 과정을 n-1번 반복하면, 정렬이 완료

2.분할정복정렬(시간복잡도 : O(NlogN))
n개의 요소를 재위치시키기 위해 n/2개를 확인하는 정렬
입력 배열을 분할하여 정렬하는 방법으로 동작

2-1. 힙정렬(Heap Sort) : 선택정렬의 개선된 버전으로, 힙 자료구조를 이용하여 정렬
    a. 주어진 배열을 최대 힙으로 변환
    b. 최대 힙에서 가장 큰 값을 추출하여 배열의 마지막 위치에 저장
    c. 배열의 크기를 1 감소시킨 후, 최대 힙으로 다시 변환
    d. 배열의 크기가 1이 될 때까지 2, 3번 과정을 반복
장점 : 안정적이고, 최악의 경우에도 O(NlogN))의 시간복잡도 보장
단점 : 추가적인 메모리 공간 필요하지 않으며, 제자리 정렬을 할 수 있음
      상수항이 크기 때문에 일반적으로 다른 정렬 알고리즘보다 느림

2-2. 병합정렬(Merge Sort) : 배열을 분할하고, 정렬한 다음, 합병하여 전체를 정렬
    a. 주어진 배열을 반으로 나눔
    b. 각각의 하위 배열에 대해 재귀적으로 병합 정렬을 수행
    c. 두 개의 정렬된 하위 배열을 합병하여 정렬된 하나의 배열로 만듬
장점 : 안정적이고, 최악의 경우에도 O(NlogN))의 시간복잡도 보장, 데이터 많아질 수록 효율적
단점 : 추가적인 메모리 공간 필요
      분할된 두 개의 하위 배열을 병합하기 위한 작업 때문에 다른 알고리즘보다 느림

2-3. 퀵정렬(Quick Sort) : 
피벗(pivot)을 이용한 분할을 사용하면서, 퀵정렬의 최악의 시간복잡도인 O(n^2)를 
피할 수 있도록 퀵정렬과 병합정렬을 결합한 알고리즘
    a. 주어진 배열을 피벗을 기준으로 두 개의 하위 배열로 분할
    b. 분할된 각각의 하위 배열에 대해 재귀적으로 병합 퀵정렬을 수행
    c. 정렬된 두 개의 하위 배열을 합병하여 전체를 정렬하는 방식으로 최종 결과
장점 : 평균적인 경우에 매우 빠른 속도, 추가적인 메모리 공간 필요없음, 제자리정렬 가능
단점 : 최악의 경우 O(N^2))의 시간복잡도, 이러한 상황을 피하기 위해서는 피벗 선택이 중요
      안정적이지 않기 때문에 정렬해야 할 데이터가 정렬 순서에 따라 중복된 값을 
      가지고 있다면, 정렬 이전과 이후의 순서가 달라질 수 있음

3.분할정복정렬 3종의 원리에 의한 특징 조사
   (힙정렬 특징, 병합정렬 특징, 퀵정렬 특징)
--------------------------------------
0.정렬 구현 시도
*/